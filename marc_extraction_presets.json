{
    "기본코드": "def extract_marc_data_to_f_fields(raw_marc_text, app_instance):\n    \"\"\"\n    원문 MARC 텍스트에서 F1-F8에 해당하는 데이터를 추출합니다.\n    Args:\n        raw_marc_text (str): 원문 MARC 텍스트.\n        app_instance: IntegratedSearchApp 클래스 인스턴스 (로그 메시지 출력을 위함).\n    Returns:\n        dict: 추출된 F1-F8 필드 데이터.\n    \"\"\"\n    f_fields = {\n        \"F1_ISBN\": \"(ISBN 추출 실패)\",\n        \"F2_Author_SurnameOrCorporate\": \"(저자 추출 실패)\",\n        \"F3_Author_FullOrMultiple\": \"(저자 추출 실패)\",\n        \"F4_245_Unprocessed\": \"(245 필드 무가공):\",\n        \"F5_LatinNumericDetection\": \"\",\n        \"F6_LatinNumericToKorean\": \"추후 알파벳/숫자 to 한글 변환기능 추가\", \n        \"F7_OriginalTitle_WithArticle\": \"(원서명 추출 실패)\",\n        \"F8_OriginalTitle_WithoutArticle\": \"(정관사 제거 원서명 추출 실패)\"\n    }\n\n    raw_lines = raw_marc_text.split('\\n')\n    trimmed_lines = [line.strip() for line in raw_lines if line.strip() != \"\"]\n\n    marc_data_lines = []\n    found_marc_start = False\n\n    for i in range(len(trimmed_lines)):\n        current_line = trimmed_lines[i]\n        if current_line == \"LDR\":\n            if i + 1 < len(trimmed_lines) and trimmed_lines[i + 1] == \"상태\":\n                found_marc_start = True\n                marc_data_lines = trimmed_lines[i:] \n                break\n    \n    if not found_marc_start:\n        app_instance.log_message(\"경고: MARC 데이터 시작점('LDR' 및 '상태' 패턴)을 찾을 수 없습니다. F1-F8 추출을 건너킵니다.\", level=\"WARNING\")\n        return f_fields \n\n    reconstructed_marc_fields = {} \n    \n    current_tag = None\n    current_field_parts = [] \n\n    for line in marc_data_lines:\n        stripped_line = line.strip()\n\n        tag_match = re.match(r'^(\\d{2,3})', stripped_line) \n        \n        if re.match(r'^\\d{9,10}$', stripped_line):\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            current_tag = None \n            current_field_parts = []\n            continue\n\n        if re.match(r'^▲[^\\d\\s]', stripped_line) or (stripped_line.startswith('▲') and len(stripped_line) < 5 and not re.match(r'^▲\\d{3}', stripped_line)):\n            app_instance.log_message(f\"정보: MARC 데이터 끝 패턴 감지: '{stripped_line}'. 필드 재구성을 중단합니다.\", level=\"INFO\")\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            break \n\n        if tag_match:\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            \n            current_tag = tag_match.group(1)\n            if len(current_tag) == 2:\n                current_tag = '0' + current_tag\n            \n            current_field_parts = [stripped_line[len(tag_match.group(1)):]] \n        elif current_tag:\n            current_field_parts.append(stripped_line)\n\n    if current_tag and current_field_parts:\n        full_content = \"\".join(current_field_parts).strip()\n        if full_content.endswith('▲'):\n            full_content = full_content[:-1]\n        if current_tag not in reconstructed_marc_fields:\n            reconstructed_marc_fields[current_tag] = []\n        reconstructed_marc_fields[current_tag].append(full_content)\n\n    if '020' in reconstructed_marc_fields:\n        isbn_regex_pattern = r'▼a([\\d\\-X]{10,17})(?:\\s*\\(.*?\\))?\\s*(?:▼g|▲|$)'\n        \n        for content in reconstructed_marc_fields['020']:\n            isbn_match = re.search(isbn_regex_pattern, content, re.IGNORECASE)\n            if isbn_match and isbn_match.group(1):\n                f_fields[\"F1_ISBN\"] = isbn_match.group(1).replace('-', '')\n                app_instance.log_message(f\"정보: F1 (ISBN) 추출 성공: {f_fields['F1_ISBN']}\")\n                break \n        else:\n            app_instance.log_message(\"경고: F1 (ISBN)을 020 필드에서 찾을 수 없습니다.\", level=\"WARNING\")\n    else:\n        app_instance.log_message(\"경고: 020 (ISBN) 필드를 찾을 수 없습니다.\", level=\"WARNING\")\n\n    temp500_original_author = None \n    temp1xx7xx_authors = [] \n\n    if '500' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['500']:\n            if \"원저자명:\" in content:\n                match = re.search(r'▼a원저자명:\\s*([^▲]+)▲?', content)\n                if match and match.group(1):\n                    temp500_original_author = match.group(1).strip()\n                    app_instance.log_message(f\"정보: 500 필드에서 원저자명 발견: \\\"{temp500_original_author}\\\"\")\n                    break\n\n    for tag in ['100', '110', '700', '710']:\n        if tag in reconstructed_marc_fields:\n            for content in reconstructed_marc_fields[tag]:\n                extracted_name = \"\"\n                # Ensure 'match' is always initialized or checked before .group()\n                match = None # Initialize match to None\n                if tag in ['100', '700']: \n                    match = re.search(r'▼a(.*?)(?:▼\\S|▲|$)', content)\n                    if match and match.group(1): # Check match before accessing group\n                        extracted_name = match.group(1).strip()\n                        # \"참고정보\" 이후 모든 내용 제거\n                        if '참고정보' in extracted_name:\n                            extracted_name = extracted_name.split('참고정보')[0].strip()\n                        extracted_name = re.sub(r',?$', '', extracted_name)\n                        extracted_name = extracted_name.replace('▲', '').strip()\n                elif tag in ['110', '710']: \n                    match = re.search(r'▼a([^▲]+)▲?', content)\n                    if match and match.group(1): # Check match before accessing group\n                        extracted_name = match.group(1).strip()\n                        extracted_name = extracted_name.replace('▲', '').strip()\n                \n                if extracted_name and extracted_name != '▲':\n                    temp1xx7xx_authors.append(extracted_name)\n                    app_instance.log_message(f\"정보: {tag} 필드에서 저자명 추출: \\\"{extracted_name}\\\"\")\n\n    if temp500_original_author and contains_cjk_characters(temp500_original_author):\n        f_fields[\"F2_Author_SurnameOrCorporate\"] = re.sub(r'\\s*\\(.*?\\)', '', temp500_original_author.split(',')[0]).strip()\n        app_instance.log_message(f\"정보: F2 (저자-단일) 500 필드 CJK 저자명 사용: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n    elif temp1xx7xx_authors:\n        first_author = temp1xx7xx_authors[0]\n        if ',' in first_author: \n            f_fields[\"F2_Author_SurnameOrCorporate\"] = first_author.split(',')[0].strip()\n            app_instance.log_message(f\"정보: F2 (저자-단일) 1xx/7xx 필드 성 추출: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n        else: \n            f_fields[\"F2_Author_SurnameOrCorporate\"] = first_author\n            app_instance.log_message(f\"정보: F2 (저자-단일) 1xx/7xx 필드 전체 이름/단체명 사용: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n    else:\n        app_instance.log_message(\"경고: F2 (저자-단일) 추출 실패. 관련 저자 정보를 찾을 수 없습니다.\", level=\"WARNING\")\n    \n    if temp1xx7xx_authors:\n        f_fields[\"F3_Author_FullOrMultiple\"] = \", \".join(temp1xx7xx_authors)\n        app_instance.log_message(f\"정보: F3 (저자-전체/복수) 추출 성공.\")\n    else:\n        app_instance.log_message(\"경고: F3 (저자-전체/복수) 추출 실패. 관련 저자 정보를 찾을 수 없습니다.\", level=\"WARNING\")\n\n    if '245' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['245']:\n            # Initialize match_a to None for each iteration\n            match_a = None\n            if content.startswith(\"10▼a\"): \n                 f_fields[\"F4_245_Unprocessed\"] = content[len(\"10▼a\"):].replace('▲', '').strip()\n                 app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (245 10).\")\n            elif content.startswith(\"00▼a\"): \n                 f_fields[\"F4_245_Unprocessed\"] = content[len(\"00▼a\"):].replace('▲', '').strip()\n                 app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (245 00).\")\n            else: \n                 match_a = re.search(r'▼a(.*?)(?:▼\\S|$)', content)\n                 if match_a and match_a.group(1):\n                     f_fields[\"F4_245_Unprocessed\"] = match_a.group(1).strip()\n                     app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (일반 245).\")\n                 else:\n                     app_instance.log_message(\"경고: F4 (245 무가공) 필드에서 ▼a 서브필드를 찾을 수 없습니다.\", level=\"WARNING\")\n            break \n    else:\n        app_instance.log_message(\"경고: 245 필드를 찾을 수 없습니다. F4 (245 무가공) 추출 실패.\", level=\"WARNING\")\n\n    if f_fields[\"F4_245_Unprocessed\"] != \"(245 필드 추출 실패)\":\n        text_to_analyze = f_fields[\"F4_245_Unprocessed\"]\n\n        cross_delimiter = \"=▼x\"\n        cross_index = text_to_analyze.find(cross_delimiter)\n        if cross_index != -1:\n            text_to_analyze = text_to_analyze[:cross_index]\n\n        marc_subfield_delimiter_pattern = re.compile(r'[:;/]?▼[a-z0-9]')\n        cleaned_text = marc_subfield_delimiter_pattern.sub('', text_to_analyze)\n\n        latin_numeric_regex = re.compile(r'[A-Za-z0-9\\u00C0-\\u017F]+(?:[\\- ]?[A-Za-z0-9\\u00C0-\\u017F]+)*|\\d+(?:[\\- ]?\\d+)*')\n        \n        matches = latin_numeric_regex.findall(cleaned_text)\n\n        filtered_matches = [m for m in matches if not contains_cjk_characters(m)]\n\n        if filtered_matches:\n            f_fields[\"F5_LatinNumericDetection\"] = \" \".join(filtered_matches)\n            app_instance.log_message(f\"정보: F5 (245 라틴/숫자) 추출 성공: \\\"{f_fields['F5_LatinNumericDetection']}\\\"\")\n        else:\n            f_fields[\"F5_LatinNumericDetection\"] = \"\"\n            app_instance.log_message(\"정보: F5 (245 라틴/숫자) 추출된 내용 없음.\", level=\"INFO\")\n    else:\n        app_instance.log_message(\"경고: F4 (245 무가공) 필드가 없어 F5 (245 라틴/숫자) 추출을 건너킵니다.\", level=\"WARNING\")\n\n    found_246_19_content = None\n    found_246_39_content = None\n\n    if '246' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['246']:\n            indicator_match_in_content = re.match(r'^\\s*([0-9#\\s]{1,4})▼a', content) \n            \n            combined_indicators = \"\"\n            if indicator_match_in_content and indicator_match_in_content.group(1):\n                combined_indicators = indicator_match_in_content.group(1).replace(' ', '').replace('#', '')\n            \n            match_a = re.search(r'▼a(.*?)(?:▼\\S|$)', content) \n            extracted_variant_title = \"\"\n            if match_a and match_a.group(1):\n                extracted_variant_title = match_a.group(1).strip()\n                refine_match = re.match(r'(.*?)(?:\\s*:▼b|\\s*\\/▼d|\\s*=\\S+|\\s*:?\\s*▲?$)', extracted_variant_title)\n                if refine_match and refine_match.group(1):\n                    extracted_variant_title = refine_match.group(1).strip()\n                    extracted_variant_title = extracted_variant_title.replace('▲', '').strip()\n\n            if extracted_variant_title:\n                if combined_indicators == \"19\" and found_246_19_content is None:\n                    found_246_19_content = extracted_variant_title\n                    app_instance.log_message(f\"정보: 246 19 필드에서 원서명 발견: \\\"{found_246_19_content}\\\"\")\n                elif combined_indicators == \"39\" and found_246_39_content is None:\n                    found_246_39_content = extracted_variant_title\n                    app_instance.log_message(f\"정보: 246 39 필드에서 원서명 발견: \\\"{found_246_39_content}\\\"\")\n    \n    if found_246_19_content:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = found_246_19_content\n        app_instance.log_message(f\"정보: F7 (원서명-관사 포함) 추출 성공 (246 19 우선).\")\n    elif found_246_39_content:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = found_246_39_content\n        app_instance.log_message(f\"정보: F7 (원서명-관사 포함) 추출 성공 (246 39 사용).\")\n    else:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = \"(원서명 추출 실패)\"\n        app_instance.log_message(\"경고: F7 (원서명-관사 포함) 추출 실패. 246 19 또는 246 39 필드를 찾을 수 없습니다.\", level=\"WARNING\")\n    \n    if f_fields[\"F7_OriginalTitle_WithArticle\"] != \"(원서명 추출 실패)\":\n        f_fields[\"F8_OriginalTitle_WithoutArticle\"] = remove_leading_article(f_fields[\"F7_OriginalTitle_WithArticle\"])\n        app_instance.log_message(f\"정보: F8 (원서명-관사 제거) 추출 성공.\")\n    else:\n        app_instance.log_message(\"경고: F8 (원서명-관사 제거) 추출 실패. F7 필드가 없어 변환할 수 없습니다.\", level=\"WARNING\")\n    \n    return f_fields",
    "test": "def extract_marc_data_to_f_fields(raw_marc_text, app_instance):\n    \"\"\"\n    Args:\n        raw_marc_text (str): 원문 MARC 텍스트.\n        app_instance: IntegratedSearchApp 클래스 인스턴스 (로그 메시지 출력을 위함).\n    Returns:\n        dict: 추출된 F1-F8 필드 데이터.\n    \"\"\"\n    f_fields = {\n        \"F1_ISBN\": \"(ISBN 추출 실패)\",\n        \"F2_Author_SurnameOrCorporate\": \"(저자 추출 실패)\",\n        \"F3_Author_FullOrMultiple\": \"(저자 추출 실패)\",\n        \"F4_245_Unprocessed\": \"(245 필드 무가공):\",\n        \"F5_LatinNumericDetection\": \"\",\n        \"F6_LatinNumericToKorean\": \"추후 알파벳/숫자 to 한글 변환기능 추가\", \n        \"F7_OriginalTitle_WithArticle\": \"(원서명 추출 실패)\",\n        \"F8_OriginalTitle_WithoutArticle\": \"(정관사 제거 원서명 추출 실패)\"\n    }\n\n    raw_lines = raw_marc_text.split('\\n')\n    trimmed_lines = [line.strip() for line in raw_lines if line.strip() != \"\"]\n\n    marc_data_lines = []\n    found_marc_start = False\n\n    for i in range(len(trimmed_lines)):\n        current_line = trimmed_lines[i]\n        if current_line == \"LDR\":\n            if i + 1 < len(trimmed_lines) and trimmed_lines[i + 1] == \"상태\":\n                found_marc_start = True\n                marc_data_lines = trimmed_lines[i:] \n                break\n    \n    if not found_marc_start:\n        app_instance.log_message(\"경고: MARC 데이터 시작점('LDR' 및 '상태' 패턴)을 찾을 수 없습니다. F1-F8 추출을 건너킵니다.\", level=\"WARNING\")\n        return f_fields \n\n    reconstructed_marc_fields = {} \n    \n    current_tag = None\n    current_field_parts = [] \n\n    for line in marc_data_lines:\n        stripped_line = line.strip()\n\n        tag_match = re.match(r'^(\\d{2,3})', stripped_line) \n        \n        if re.match(r'^\\d{9,10}$', stripped_line):\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            current_tag = None \n            current_field_parts = []\n            continue\n\n        if re.match(r'^▲[^\\d\\s]', stripped_line) or (stripped_line.startswith('▲') and len(stripped_line) < 5 and not re.match(r'^▲\\d{3}', stripped_line)):\n            app_instance.log_message(f\"정보: MARC 데이터 끝 패턴 감지: '{stripped_line}'. 필드 재구성을 중단합니다.\", level=\"INFO\")\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            break \n\n        if tag_match:\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            \n            current_tag = tag_match.group(1)\n            if len(current_tag) == 2:\n                current_tag = '0' + current_tag\n            \n            current_field_parts = [stripped_line[len(tag_match.group(1)):]] \n        elif current_tag:\n            current_field_parts.append(stripped_line)\n\n    if current_tag and current_field_parts:\n        full_content = \"\".join(current_field_parts).strip()\n        if full_content.endswith('▲'):\n            full_content = full_content[:-1]\n        if current_tag not in reconstructed_marc_fields:\n            reconstructed_marc_fields[current_tag] = []\n        reconstructed_marc_fields[current_tag].append(full_content)\n\n    if '020' in reconstructed_marc_fields:\n        isbn_regex_pattern = r'▼a([\\d\\-X]{10,17})(?:\\s*\\(.*?\\))?\\s*(?:▼g|▲|$)'\n        \n        for content in reconstructed_marc_fields['020']:\n            isbn_match = re.search(isbn_regex_pattern, content, re.IGNORECASE)\n            if isbn_match and isbn_match.group(1):\n                f_fields[\"F1_ISBN\"] = isbn_match.group(1).replace('-', '')\n                app_instance.log_message(f\"정보: F1 (ISBN) 추출 성공: {f_fields['F1_ISBN']}\")\n                break \n        else:\n            app_instance.log_message(\"경고: F1 (ISBN)을 020 필드에서 찾을 수 없습니다.\", level=\"WARNING\")\n    else:\n        app_instance.log_message(\"경고: 020 (ISBN) 필드를 찾을 수 없습니다.\", level=\"WARNING\")\n\n    temp500_original_author = None \n    temp1xx7xx_authors = [] \n\n    if '500' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['500']:\n            if \"원저자명:\" in content:\n                match = re.search(r'▼a원저자명:\\s*([^▲]+)▲?', content)\n                if match and match.group(1):\n                    temp500_original_author = match.group(1).strip()\n                    app_instance.log_message(f\"정보: 500 필드에서 원저자명 발견: \\\"{temp500_original_author}\\\"\")\n                    break\n\n    for tag in ['100', '110', '700', '710']:\n        if tag in reconstructed_marc_fields:\n            for content in reconstructed_marc_fields[tag]:\n                extracted_name = \"\"\n                # Ensure 'match' is always initialized or checked before .group()\n                match = None # Initialize match to None\n                if tag in ['100', '700']: \n                    match = re.search(r'▼a(.*?)(?:▼\\S|▲|$)', content)\n                    if match and match.group(1): # Check match before accessing group\n                        extracted_name = match.group(1).strip()\n                        # \"참고정보\" 이후 모든 내용 제거\n                        if '참고정보' in extracted_name:\n                            extracted_name = extracted_name.split('참고정보')[0].strip()\n                        extracted_name = re.sub(r',?$', '', extracted_name)\n                        extracted_name = extracted_name.replace('▲', '').strip()\n                elif tag in ['110', '710']: \n                    match = re.search(r'▼a([^▲]+)▲?', content)\n                    if match and match.group(1): # Check match before accessing group\n                        extracted_name = match.group(1).strip()\n                        extracted_name = extracted_name.replace('▲', '').strip()\n                \n                if extracted_name and extracted_name != '▲':\n                    temp1xx7xx_authors.append(extracted_name)\n                    app_instance.log_message(f\"정보: {tag} 필드에서 저자명 추출: \\\"{extracted_name}\\\"\")\n\n    if temp500_original_author and contains_cjk_characters(temp500_original_author):\n        f_fields[\"F2_Author_SurnameOrCorporate\"] = re.sub(r'\\s*\\(.*?\\)', '', temp500_original_author.split(',')[0]).strip()\n        app_instance.log_message(f\"정보: F2 (저자-단일) 500 필드 CJK 저자명 사용: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n    elif temp1xx7xx_authors:\n        first_author = temp1xx7xx_authors[0]\n        if ',' in first_author: \n            f_fields[\"F2_Author_SurnameOrCorporate\"] = first_author.split(',')[0].strip()\n            app_instance.log_message(f\"정보: F2 (저자-단일) 1xx/7xx 필드 성 추출: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n        else: \n            f_fields[\"F2_Author_SurnameOrCorporate\"] = first_author\n            app_instance.log_message(f\"정보: F2 (저자-단일) 1xx/7xx 필드 전체 이름/단체명 사용: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n    else:\n        app_instance.log_message(\"경고: F2 (저자-단일) 추출 실패. 관련 저자 정보를 찾을 수 없습니다.\", level=\"WARNING\")\n    \n    if temp1xx7xx_authors:\n        f_fields[\"F3_Author_FullOrMultiple\"] = \", \".join(temp1xx7xx_authors)\n        app_instance.log_message(f\"정보: F3 (저자-전체/복수) 추출 성공.\")\n    else:\n        app_instance.log_message(\"경고: F3 (저자-전체/복수) 추출 실패. 관련 저자 정보를 찾을 수 없습니다.\", level=\"WARNING\")\n\n    if '245' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['245']:\n            # Initialize match_a to None for each iteration\n            match_a = None\n            if content.startswith(\"10▼a\"): \n                 f_fields[\"F4_245_Unprocessed\"] = content[len(\"10▼a\"):].replace('▲', '').strip()\n                 app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (245 10).\")\n            elif content.startswith(\"00▼a\"): \n                 f_fields[\"F4_245_Unprocessed\"] = content[len(\"00▼a\"):].replace('▲', '').strip()\n                 app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (245 00).\")\n            else: \n                 match_a = re.search(r'▼a(.*?)(?:▼\\S|$)', content)\n                 if match_a and match_a.group(1):\n                     f_fields[\"F4_245_Unprocessed\"] = match_a.group(1).strip()\n                     app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (일반 245).\")\n                 else:\n                     app_instance.log_message(\"경고: F4 (245 무가공) 필드에서 ▼a 서브필드를 찾을 수 없습니다.\", level=\"WARNING\")\n            break \n    else:\n        app_instance.log_message(\"경고: 245 필드를 찾을 수 없습니다. F4 (245 무가공) 추출 실패.\", level=\"WARNING\")\n\n    if f_fields[\"F4_245_Unprocessed\"] != \"(245 필드 추출 실패)\":\n        text_to_analyze = f_fields[\"F4_245_Unprocessed\"]\n\n        cross_delimiter = \"=▼x\"\n        cross_index = text_to_analyze.find(cross_delimiter)\n        if cross_index != -1:\n            text_to_analyze = text_to_analyze[:cross_index]\n\n        marc_subfield_delimiter_pattern = re.compile(r'[:;/]?▼[a-z0-9]')\n        cleaned_text = marc_subfield_delimiter_pattern.sub('', text_to_analyze)\n\n        latin_numeric_regex = re.compile(r'[A-Za-z0-9\\u00C0-\\u017F]+(?:[\\- ]?[A-Za-z0-9\\u00C0-\\u017F]+)*|\\d+(?:[\\- ]?\\d+)*')\n        \n        matches = latin_numeric_regex.findall(cleaned_text)\n\n        filtered_matches = [m for m in matches if not contains_cjk_characters(m)]\n\n        if filtered_matches:\n            f_fields[\"F5_LatinNumericDetection\"] = \" \".join(filtered_matches)\n            app_instance.log_message(f\"정보: F5 (245 라틴/숫자) 추출 성공: \\\"{f_fields['F5_LatinNumericDetection']}\\\"\")\n        else:\n            f_fields[\"F5_LatinNumericDetection\"] = \"\"\n            app_instance.log_message(\"정보: F5 (245 라틴/숫자) 추출된 내용 없음.\", level=\"INFO\")\n    else:\n        app_instance.log_message(\"경고: F4 (245 무가공) 필드가 없어 F5 (245 라틴/숫자) 추출을 건너킵니다.\", level=\"WARNING\")\n\n    found_246_19_content = None\n    found_246_39_content = None\n\n    if '246' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['246']:\n            indicator_match_in_content = re.match(r'^\\s*([0-9#\\s]{1,4})▼a', content) \n            \n            combined_indicators = \"\"\n            if indicator_match_in_content and indicator_match_in_content.group(1):\n                combined_indicators = indicator_match_in_content.group(1).replace(' ', '').replace('#', '')\n            \n            match_a = re.search(r'▼a(.*?)(?:▼\\S|$)', content) \n            extracted_variant_title = \"\"\n            if match_a and match_a.group(1):\n                extracted_variant_title = match_a.group(1).strip()\n                refine_match = re.match(r'(.*?)(?:\\s*:▼b|\\s*\\/▼d|\\s*=\\S+|\\s*:?\\s*▲?$)', extracted_variant_title)\n                if refine_match and refine_match.group(1):\n                    extracted_variant_title = refine_match.group(1).strip()\n                    extracted_variant_title = extracted_variant_title.replace('▲', '').strip()\n\n            if extracted_variant_title:\n                if combined_indicators == \"19\" and found_246_19_content is None:\n                    found_246_19_content = extracted_variant_title\n                    app_instance.log_message(f\"정보: 246 19 필드에서 원서명 발견: \\\"{found_246_19_content}\\\"\")\n                elif combined_indicators == \"39\" and found_246_39_content is None:\n                    found_246_39_content = extracted_variant_title\n                    app_instance.log_message(f\"정보: 246 39 필드에서 원서명 발견: \\\"{found_246_39_content}\\\"\")\n    \n    if found_246_19_content:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = found_246_19_content\n        app_instance.log_message(f\"정보: F7 (원서명-관사 포함) 추출 성공 (246 19 우선).\")\n    elif found_246_39_content:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = found_246_39_content\n        app_instance.log_message(f\"정보: F7 (원서명-관사 포함) 추출 성공 (246 39 사용).\")\n    else:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = \"(원서명 추출 실패)\"\n        app_instance.log_message(\"경고: F7 (원서명-관사 포함) 추출 실패. 246 19 또는 246 39 필드를 찾을 수 없습니다.\", level=\"WARNING\")\n    \n    if f_fields[\"F7_OriginalTitle_WithArticle\"] != \"(원서명 추출 실패)\":\n        f_fields[\"F8_OriginalTitle_WithoutArticle\"] = remove_leading_article(f_fields[\"F7_OriginalTitle_WithArticle\"])\n        app_instance.log_message(f\"정보: F8 (원서명-관사 제거) 추출 성공.\")\n    else:\n        app_instance.log_message(\"경고: F8 (원서명-관사 제거) 추출 실패. F7 필드가 없어 변환할 수 없습니다.\", level=\"WARNING\")\n    \n    return f_fields",
    "Solars": "def extract_marc_data_to_f_fields(raw_marc_text, app_instance):\n    \"\"\"\n    원문 MARC 텍스트에서 F1-F8에 해당하는 데이터를 추출합니다.\n    Args:\n        raw_marc_text (str): 원문 MARC 텍스트.\n        app_instance: IntegratedSearchApp 클래스 인스턴스 (로그 메시지 출력을 위함).\n    Returns:\n        dict: 추출된 F1-F8 필드 데이터.\n    \"\"\"\n    f_fields = {\n        \"F1_ISBN\": \"(ISBN 추출 실패)\",\n        \"F2_Author_SurnameOrCorporate\": \"(저자 추출 실패)\",\n        \"F3_Author_FullOrMultiple\": \"(저자 추출 실패)\",\n        \"F4_245_Unprocessed\": \"(245 필드 무가공):\",\n        \"F5_LatinNumericDetection\": \"\",\n        \"F6_LatinNumericToKorean\": \"추후 알파벳/숫자 to 한글 변환기능 추가\", \n        \"F7_OriginalTitle_WithArticle\": \"(원서명 추출 실패)\",\n        \"F8_OriginalTitle_WithoutArticle\": \"(정관사 제거 원서명 추출 실패)\"\n    }\n\n    raw_lines = raw_marc_text.split('\\n')\n    trimmed_lines = [line.strip() for line in raw_lines if line.strip() != \"\"]\n\n    marc_data_lines = []\n    found_marc_start = False\n\n    for i in range(len(trimmed_lines)):\n        current_line = trimmed_lines[i]\n        if current_line == \"LDR\":\n            if i + 1 < len(trimmed_lines) and trimmed_lines[i + 1] == \"상태\":\n                found_marc_start = True\n                marc_data_lines = trimmed_lines[i:] \n                break\n    \n    if not found_marc_start:\n        app_instance.log_message(\"경고: MARC 데이터 시작점('LDR' 및 '상태' 패턴)을 찾을 수 없습니다. F1-F8 추출을 건너킵니다.\", level=\"WARNING\")\n        return f_fields \n\n    reconstructed_marc_fields = {} \n    \n    current_tag = None\n    current_field_parts = [] \n\n    for line in marc_data_lines:\n        stripped_line = line.strip()\n\n        tag_match = re.match(r'^(\\d{2,3})', stripped_line) \n        \n        if re.match(r'^\\d{9,10}$', stripped_line):\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            current_tag = None \n            current_field_parts = []\n            continue\n\n        if re.match(r'^▲[^\\d\\s]', stripped_line) or (stripped_line.startswith('▲') and len(stripped_line) < 5 and not re.match(r'^▲\\d{3}', stripped_line)):\n            app_instance.log_message(f\"정보: MARC 데이터 끝 패턴 감지: '{stripped_line}'. 필드 재구성을 중단합니다.\", level=\"INFO\")\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            break \n\n        if tag_match:\n            if current_tag and current_field_parts:\n                full_content = \"\".join(current_field_parts).strip()\n                if full_content.endswith('▲'):\n                    full_content = full_content[:-1]\n                if current_tag not in reconstructed_marc_fields:\n                    reconstructed_marc_fields[current_tag] = []\n                reconstructed_marc_fields[current_tag].append(full_content)\n            \n            current_tag = tag_match.group(1)\n            if len(current_tag) == 2:\n                current_tag = '0' + current_tag\n            \n            current_field_parts = [stripped_line[len(tag_match.group(1)):]] \n        elif current_tag:\n            current_field_parts.append(stripped_line)\n\n    if current_tag and current_field_parts:\n        full_content = \"\".join(current_field_parts).strip()\n        if full_content.endswith('▲'):\n            full_content = full_content[:-1]\n        if current_tag not in reconstructed_marc_fields:\n            reconstructed_marc_fields[current_tag] = []\n        reconstructed_marc_fields[current_tag].append(full_content)\n\n    if '020' in reconstructed_marc_fields:\n        isbn_regex_pattern = r'▼a([\\d\\-X]{10,17})(?:\\s*\\(.*?\\))?\\s*(?:▼g|▲|$)'\n        \n        for content in reconstructed_marc_fields['020']:\n            isbn_match = re.search(isbn_regex_pattern, content, re.IGNORECASE)\n            if isbn_match and isbn_match.group(1):\n                f_fields[\"F1_ISBN\"] = isbn_match.group(1).replace('-', '')\n                app_instance.log_message(f\"정보: F1 (ISBN) 추출 성공: {f_fields['F1_ISBN']}\")\n                break \n        else:\n            app_instance.log_message(\"경고: F1 (ISBN)을 020 필드에서 찾을 수 없습니다.\", level=\"WARNING\")\n    else:\n        app_instance.log_message(\"경고: 020 (ISBN) 필드를 찾을 수 없습니다.\", level=\"WARNING\")\n\n    temp500_original_author = None \n    temp1xx7xx_authors = [] \n\n    if '500' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['500']:\n            if \"원저자명:\" in content:\n                match = re.search(r'▼a원저자명:\\s*([^▲]+)▲?', content)\n                if match and match.group(1):\n                    temp500_original_author = match.group(1).strip()\n                    app_instance.log_message(f\"정보: 500 필드에서 원저자명 발견: \\\"{temp500_original_author}\\\"\")\n                    break\n\n    for tag in ['100', '110', '700', '710']:\n        if tag in reconstructed_marc_fields:\n            for content in reconstructed_marc_fields[tag]:\n                extracted_name = \"\"\n                # Ensure 'match' is always initialized or checked before .group()\n                match = None # Initialize match to None\n                if tag in ['100', '700']: \n                    match = re.search(r'▼a(.*?)(?:▼\\S|▲|$)', content)\n                    if match and match.group(1): # Check match before accessing group\n                        extracted_name = match.group(1).strip()\n                        # \"참고정보\" 이후 모든 내용 제거\n                        if '참고정보' in extracted_name:\n                            extracted_name = extracted_name.split('참고정보')[0].strip()\n                        extracted_name = re.sub(r',?$', '', extracted_name)\n                        extracted_name = extracted_name.replace('▲', '').strip()\n                elif tag in ['110', '710']: \n                    match = re.search(r'▼a([^▲]+)▲?', content)\n                    if match and match.group(1): # Check match before accessing group\n                        extracted_name = match.group(1).strip()\n                        extracted_name = extracted_name.replace('▲', '').strip()\n                \n                if extracted_name and extracted_name != '▲':\n                    temp1xx7xx_authors.append(extracted_name)\n                    app_instance.log_message(f\"정보: {tag} 필드에서 저자명 추출: \\\"{extracted_name}\\\"\")\n\n    if temp500_original_author and contains_cjk_characters(temp500_original_author):\n        f_fields[\"F2_Author_SurnameOrCorporate\"] = re.sub(r'\\s*\\(.*?\\)', '', temp500_original_author.split(',')[0]).strip()\n        app_instance.log_message(f\"정보: F2 (저자-단일) 500 필드 CJK 저자명 사용: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n    elif temp1xx7xx_authors:\n        first_author = temp1xx7xx_authors[0]\n        if ',' in first_author: \n            f_fields[\"F2_Author_SurnameOrCorporate\"] = first_author.split(',')[0].strip()\n            app_instance.log_message(f\"정보: F2 (저자-단일) 1xx/7xx 필드 성 추출: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n        else: \n            f_fields[\"F2_Author_SurnameOrCorporate\"] = first_author\n            app_instance.log_message(f\"정보: F2 (저자-단일) 1xx/7xx 필드 전체 이름/단체명 사용: \\\"{f_fields['F2_Author_SurnameOrCorporate']}\\\"\")\n    else:\n        app_instance.log_message(\"경고: F2 (저자-단일) 추출 실패. 관련 저자 정보를 찾을 수 없습니다.\", level=\"WARNING\")\n    \n    if temp1xx7xx_authors:\n        f_fields[\"F3_Author_FullOrMultiple\"] = \", \".join(temp1xx7xx_authors)\n        app_instance.log_message(f\"정보: F3 (저자-전체/복수) 추출 성공.\")\n    else:\n        app_instance.log_message(\"경고: F3 (저자-전체/복수) 추출 실패. 관련 저자 정보를 찾을 수 없습니다.\", level=\"WARNING\")\n\n    if '245' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['245']:\n            # Initialize match_a to None for each iteration\n            match_a = None\n            if content.startswith(\"10▼a\"): \n                 f_fields[\"F4_245_Unprocessed\"] = content[len(\"10▼a\"):].replace('▲', '').strip()\n                 app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (245 10).\")\n            elif content.startswith(\"00▼a\"): \n                 f_fields[\"F4_245_Unprocessed\"] = content[len(\"00▼a\"):].replace('▲', '').strip()\n                 app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (245 00).\")\n            else: \n                 match_a = re.search(r'▼a(.*?)(?:▼\\S|$)', content)\n                 if match_a and match_a.group(1):\n                     f_fields[\"F4_245_Unprocessed\"] = match_a.group(1).strip()\n                     app_instance.log_message(f\"정보: F4 (245 무가공) 추출 성공 (일반 245).\")\n                 else:\n                     app_instance.log_message(\"경고: F4 (245 무가공) 필드에서 ▼a 서브필드를 찾을 수 없습니다.\", level=\"WARNING\")\n            break \n    else:\n        app_instance.log_message(\"경고: 245 필드를 찾을 수 없습니다. F4 (245 무가공) 추출 실패.\", level=\"WARNING\")\n\n    if f_fields[\"F4_245_Unprocessed\"] != \"(245 필드 추출 실패)\":\n        text_to_analyze = f_fields[\"F4_245_Unprocessed\"]\n\n        cross_delimiter = \"=▼x\"\n        cross_index = text_to_analyze.find(cross_delimiter)\n        if cross_index != -1:\n            text_to_analyze = text_to_analyze[:cross_index]\n\n        marc_subfield_delimiter_pattern = re.compile(r'[:;/]?▼[a-z0-9]')\n        cleaned_text = marc_subfield_delimiter_pattern.sub('', text_to_analyze)\n\n        latin_numeric_regex = re.compile(r'[A-Za-z0-9\\u00C0-\\u017F]+(?:[\\- ]?[A-Za-z0-9\\u00C0-\\u017F]+)*|\\d+(?:[\\- ]?\\d+)*')\n        \n        matches = latin_numeric_regex.findall(cleaned_text)\n\n        filtered_matches = [m for m in matches if not contains_cjk_characters(m)]\n\n        if filtered_matches:\n            f_fields[\"F5_LatinNumericDetection\"] = \" \".join(filtered_matches)\n            app_instance.log_message(f\"정보: F5 (245 라틴/숫자) 추출 성공: \\\"{f_fields['F5_LatinNumericDetection']}\\\"\")\n        else:\n            f_fields[\"F5_LatinNumericDetection\"] = \"\"\n            app_instance.log_message(\"정보: F5 (245 라틴/숫자) 추출된 내용 없음.\", level=\"INFO\")\n    else:\n        app_instance.log_message(\"경고: F4 (245 무가공) 필드가 없어 F5 (245 라틴/숫자) 추출을 건너킵니다.\", level=\"WARNING\")\n\n    found_246_19_content = None\n    found_246_39_content = None\n\n    if '246' in reconstructed_marc_fields:\n        for content in reconstructed_marc_fields['246']:\n            indicator_match_in_content = re.match(r'^\\s*([0-9#\\s]{1,4})▼a', content) \n            \n            combined_indicators = \"\"\n            if indicator_match_in_content and indicator_match_in_content.group(1):\n                combined_indicators = indicator_match_in_content.group(1).replace(' ', '').replace('#', '')\n            \n            match_a = re.search(r'▼a(.*?)(?:▼\\S|$)', content) \n            extracted_variant_title = \"\"\n            if match_a and match_a.group(1):\n                extracted_variant_title = match_a.group(1).strip()\n                refine_match = re.match(r'(.*?)(?:\\s*:▼b|\\s*\\/▼d|\\s*=\\S+|\\s*:?\\s*▲?$)', extracted_variant_title)\n                if refine_match and refine_match.group(1):\n                    extracted_variant_title = refine_match.group(1).strip()\n                    extracted_variant_title = extracted_variant_title.replace('▲', '').strip()\n\n            if extracted_variant_title:\n                if combined_indicators == \"19\" and found_246_19_content is None:\n                    found_246_19_content = extracted_variant_title\n                    app_instance.log_message(f\"정보: 246 19 필드에서 원서명 발견: \\\"{found_246_19_content}\\\"\")\n                elif combined_indicators == \"39\" and found_246_39_content is None:\n                    found_246_39_content = extracted_variant_title\n                    app_instance.log_message(f\"정보: 246 39 필드에서 원서명 발견: \\\"{found_246_39_content}\\\"\")\n    \n    if found_246_19_content:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = found_246_19_content\n        app_instance.log_message(f\"정보: F7 (원서명-관사 포함) 추출 성공 (246 19 우선).\")\n    elif found_246_39_content:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = found_246_39_content\n        app_instance.log_message(f\"정보: F7 (원서명-관사 포함) 추출 성공 (246 39 사용).\")\n    else:\n        f_fields[\"F7_OriginalTitle_WithArticle\"] = \"(원서명 추출 실패)\"\n        app_instance.log_message(\"경고: F7 (원서명-관사 포함) 추출 실패. 246 19 또는 246 39 필드를 찾을 수 없습니다.\", level=\"WARNING\")\n    \n    if f_fields[\"F7_OriginalTitle_WithArticle\"] != \"(원서명 추출 실패)\":\n        f_fields[\"F8_OriginalTitle_WithoutArticle\"] = remove_leading_article(f_fields[\"F7_OriginalTitle_WithArticle\"])\n        app_instance.log_message(f\"정보: F8 (원서명-관사 제거) 추출 성공.\")\n    else:\n        app_instance.log_message(\"경고: F8 (원서명-관사 제거) 추출 실패. F7 필드가 없어 변환할 수 없습니다.\", level=\"WARNING\")\n    \n    return f_fields",
    "Solars with full MARC data": "# -*- coding: utf-8 -*-\n# 이 곳에 MARC 추출 로직을 작성하세요.\n# 이 코드는 반드시 (f_fields 딕셔너리, full_marc_string 문자열) 튜플을 반환해야 합니다.\n\nimport re\n\ndef _generate_marcedit_style_string(raw_marc_text, parsed_data):\n    \"\"\" MARC 데이터를 MARCedit 스타일 문자열로 변환하는 헬퍼 함수 \"\"\"\n    output_lines = []\n    try:\n        start_index = raw_marc_text.find('LDR')\n        end_index = raw_marc_text.find('참고정보')\n        if start_index == -1: return \"오류: MARC 데이터(LDR)를 찾을 수 없습니다.\"\n        marc_block = raw_marc_text[start_index:] if end_index == -1 else raw_marc_text[start_index:end_index]\n\n        ldr_values = parsed_data.get('LDR', '').replace(' ', '')\n        output_lines.append(f\"=LDR  {ldr_values.ljust(5)} 22     c 4500\")\n        output_lines.append(f\"=007  {parsed_data.get('007', '')}\")\n        \n        match_008 = re.search(r'008\\s*\\n(.*?)(?=\\n\\s*020)', marc_block, re.DOTALL)\n        if match_008:\n            output_lines.append(\"=008\")\n            content = match_008.group(1).strip()\n            lines = [line.strip() for line in content.split('\\n') if line.strip()]\n            i = 0\n            while i < len(lines):\n                label = lines[i]\n                if (i + 1) < len(lines) and ':' not in lines[i+1] and not re.match(r'^[가-힣]', lines[i+1]):\n                    value = lines[i+1]\n                    output_lines.append(f\"  {label}: {value}\")\n                    i += 2\n                else:\n                    output_lines.append(f\"  {label}\")\n                    i += 1\n\n        for tag in sorted(parsed_data.keys()):\n            if tag.isdigit() and tag >= '020': \n                for field in parsed_data[tag]:\n                    ind1 = field.get('ind1', ' ').strip() or '\\\\'\n                    ind2 = field.get('ind2', ' ').strip() or '\\\\'\n                    subfield_strings = [f\"${code}{value}\" for code, value in field.get('subfields', [])]\n                    all_subfields = \"\".join(subfield_strings)\n                    output_lines.append(f\"={tag}  {ind1}{ind2}{all_subfields}\")\n        return \"\\n\".join(output_lines)\n    except Exception as e:\n        return f\"Full MARC 생성 중 오류 발생: {e}\"\n\ndef custom_extract_marc_data(raw_marc_text, app_instance):\n    \"\"\" F1-10 딕셔너리와 Full MARC 문자열을 모두 반환하는 메인 함수 \"\"\"\n    # 1. 내장된 F1-F10 추출 로직 실행\n    f_fields = extract_marc_data_to_f_fields(raw_marc_text, app_instance)\n    \n    # 2. Full MARC 문자열 생성을 위한 별도의 파서 실행 (UI 표시용)\n    # 이 파서는 _generate_marcedit_style_string에서 사용할 데이터 구조를 만듭니다.\n    parsed_data_for_string = {}\n    try:\n        start_index = raw_marc_text.find('LDR')\n        end_index = raw_marc_text.find('참고정보')\n        if start_index != -1:\n            marc_block = raw_marc_text[start_index:] if end_index == -1 else raw_marc_text[start_index:end_index]\n            ldr_match = re.search(r'LDR\\s*\\n(.*?)(?=\\n\\s*007)', marc_block, re.DOTALL)\n            if ldr_match:\n                ldr_content = ldr_match.group(1).strip()\n                ldr_values = [line.strip() for line in ldr_content.split('\\n') if not re.search(r'[가-힣]', line)]\n                parsed_data_for_string['LDR'] = ' '.join(filter(None, ldr_values))\n            \n            field_007_match = re.search(r'007\\s*([^\\n]+)', marc_block)\n            if field_007_match:\n                parsed_data_for_string['007'] = field_007_match.group(1).strip()\n\n            variable_fields_block_start = marc_block.find('020') if '020' in marc_block else -1\n            if variable_fields_block_start != -1:\n                variable_fields_block = marc_block[variable_fields_block_start:]\n                fields = re.split(r'^\\s*(\\d{3})', variable_fields_block, flags=re.MULTILINE)\n                for i in range(1, len(fields), 2):\n                    tag, content = fields[i], fields[i+1]\n                    if '▼' not in content: continue\n                    parts = content.split('▼', 1)\n                    indicators_raw, data = parts[0], '▼' + parts[1]\n                    indicators = re.findall(r'\\S', indicators_raw)\n                    ind1 = indicators[0] if indicators else ' '\n                    ind2 = indicators[1] if len(indicators) > 1 else ' '\n                    subfields = [(sf[0], sf[1:]) for sf in data.strip('▲\\n').split('▼') if sf]\n                    field_entry = {'ind1': ind1, 'ind2': ind2, 'subfields': subfields}\n                    if tag not in parsed_data_for_string: parsed_data_for_string[tag] = []\n                    parsed_data_for_string[tag].append(field_entry)\n    except Exception:\n        pass # 오류가 나도 일단 진행\n\n    # 3. Full MARC 문자열 생성\n    full_marc_string = _generate_marcedit_style_string(raw_marc_text, parsed_data_for_string)\n    \n    # 4. 두 개의 결과물을 튜플로 반환\n    return (f_fields, full_marc_string)"
}